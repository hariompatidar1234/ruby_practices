ABCDEFs the create and write mode 
ar file nahi h to bana dega ,or agr file h to usko override( data erase kar dega )
File.new("dev.txt","w") 

this is the write method 
syswrite("hariom partidar")

this is the close of the file 
a.close()

tis is for input the file 
a.gets

read the data of the 20 character agr file ka data size se kam hai to error aayega q ki data 
jo aap data ang rhe ho vaha tak ka data nahi hai (ya data ki size nahi hai itni )

.sysread(20)



. middile of the file  
  aFile.each_byte {|ch| putc ch; putc ?. } 


read the all data of the file (ye jo output deta hai vo aaray m hota hai but dikhta nahi hai)
  IO.readlines("fileinputoutput.txt")


This method also returns output line by line.
 The difference between the method foreach and 
 the method readlines is that the method foreach is
  associated with a block. However, unlike the method
  readlines, the method foreach does not return an array.

  IO.foreach("input.txt"){|block| puts block}

  # Rename a file from test1.txt to test2.txt
File.rename( "test1.txt", "test2.txt" )

# Delete file test2.txt
File.delete("test2.txt")




oops concept
      (getter and setter )
    attr_reader : This accessor generates the automatic Getter method for the given item.(read data only )
    attr_writer : This accessor generates the automatic Setter method for the given item.(write data onli)
    attr_accessor : This accessor generates the automatic Getter & Setter method for the given item.(read ad write bothb operation performe )



    inaritance
{
   We use the < symbol for inheriting



   access contro 


    Public Methods − Public methods can be called by anyone. Methods are public by default except for initialize, which is always private.

    Private Methods − Private methods cannot be accessed, or even viewed from outside the class. Only the class methods can access private members.

    Protected Methods − A protected method can be invoked only by objects of the defining class and its subclasses. Access is kept within the family.




    regular expression

    [0-9] matches any number from 0 to 9
    [a-z] matches any letter from a to z (no caps)
    [^a-z] negated range

    \w is equivalent to [0-9a-zA-Z_]
    \d is the same as [0-9]
    \s matches white space (tabs, regular space, newline)

There is also the negative form of these:

    \W anything that’s not in [0-9a-zA-Z_]
    \D anything that’s not a number
    \S anything that’s not a space

    + 	1 or more
* 	0 or more
? 	0 or 1
{3,5} 	between 3 and 5
# have used .size to find the length, but I think it gets the idea across.

To match strictly at the start of a string and not just on every line (after a \n) you need to use \A and \Z instead of ^ and $.

(?:...) 	Non-capturing group
(?<foo>...) 	Named group
(?=pat) 	Positive lookahead
(?<=pat) 	Positive lookbehind
(?!pat) 	Negative lookahead
(?<!pat) 	Negative lookbehind






block 
# Ruby blocks are little anonymous functions that can be passed into methods.
# Blocks are enclosed in a do / end statement or between brackets {}, and they can have multiple arguments.

# The argument names are defined between two pipe | characters.

# If you have used each before, then you have used blocks!



lambda 

Procs are coming in two flavors: lambda and non-lambda (regular procs). Differences are:

    In lambdas, return means exit from this lambda;

    In regular procs, return means exit from embracing method (and will throw LocalJumpError if invoked outside the method);

    In lambdas, arguments are treated in the same way as in methods: strict, with ArgumentError for mismatching argument number, and no additional argument processing;

    Regular procs accept arguments more generously: missing arguments are filled with nil, single Array arguments are deconstructed if the proc has multiple arguments, and there is no error raised on extra arguments.
lambda = lambda {}
lambda = ->() {}
some_lambda_function = lambda { puts "Welcome to TutorialsPoint!"}

puts some_lambda_function.class

some_lambda_function = lambda { puts "Welcome to TutorialsPoint!"}

some_lambda_function.[]
some_lambda_function.call
some_lambda_function.()



Ruby Multithreading
Multithreading is a feature in Ruby that allows
 us to create and work with threads.
A thread is a lightweight process. Using Multithreading in Ruby,
 we can create several threads, 
 that run in parallel and share process CPU and memory. 
 associate a block of code with a call to (Thread.new, Thread.start or Thread.fork)

 Thread Termination
There are different ways to terminate a thread in Ruby.
 To exit a given thread, class ::kill is used.
 The ::stop class method put the current 
 running thread to sleep and schedule the execution of another thread.
 The ::stop class method put the current 
 running thread to sleep and schedule the execution of another thread.

 t1 = Thread.new{run()} thread ka object bana k phe usse join krte h threat 

t1.join thead run krna 
sleep() sleep means  kitne time ruk k threat chalega




Metaprogramming 
refers to the idea of writing and editing the code at runtime.
 The basic idea is that classes can be defined and redefined during run time.